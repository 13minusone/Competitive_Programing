#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define ll long long
#define ull unsigned long long
#define fi first
#define se second
#define SZ(x) ((int)(x).size())
#define ALL(x) (x).begin(), (x).end()
#define MASK(i) ((1LL)<<(i))
#define GETBIT(x,i) (((x)>>(i))&1)
#define TURNOFF(x,i) ((x)&(~(1<<i)))
#define LOG 20
#define MASK(i) ((1LL)<<(i))
#define EL cout << "\n"
#define FU(i, a, b) for(int i=a; i<=b; i++)
#define FD(i, a, b) for(int i=a; i>=b; i--)
#define REP(i, x) for(int i=0; i<x; i++)
#define REPD(i, x) for(int i=x-1; i>=0; i--)
const int MAX = 2e5 + 5;
const int mod = 1e9 + 7;
const int base = 31;
const int INF = 1e9 + 7;
typedef pair<ll, int> ii;

#define task "long"
void init()
{
    if (fopen(task".inp","r"))
    {
        freopen(task".inp","r",stdin);
        freopen(task".out","w",stdout);
    }
    else if (fopen(task".in", "r"))
    {
       freopen(task".in", "r", stdin);
       freopen(task".out", "w", stdout);
    }
}

void fastio()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);
}
int dx[]={0,1,0,-1,1,1,-1,-1};
int dy[]={1,0,-1,0,1,-1,1,-1};
template<class X, class Y> bool maximize(X &x, Y y){ if (x < y) {x = y; return true;} return false;};
template<class X, class Y> bool minimize(X &x, Y y){ if (x > y) {x = y; return true;} return false;};
void add(int &x, int y) { x += y; if (x>=mod) x-=mod;}
void sub(int &x, int y) { x -= y; if (x<0) x+=mod;}
int mul(int x, int y) {return 1LL * x * y % mod;}
int n, m;
ll d[MAX];
vector<ii> adj[MAX];
void read()
{
    cin >> n >> m;
    FU(i, 1, m)
    {
        int u, v, c; cin >> u >> v >> c;
        adj[u].pb(ii(v, c));
    }
}
void sol()
{
    priority_queue<ll, vector<ii>, greater<ii>> q;
    memset(d, 0x3f, sizeof d);
    d[1] = 0;
    q.push(ii(d[1], 1));
    while (!q.empty())
    {
        int u = q.top().se;
        ll du = q.top().fi;
        q.pop();
        if (du != d[u]) continue;
        for(auto [v, c]: adj[u])
        {
            //int v = tmp.fi, c = tmp.se;
            if (minimize(d[v], (ll)du + c)) q.push(ii(d[v], v));
        }
    }
    FU(i, 1, n) cout << d[i] << " ";
}
signed main()
{
    fastio();
    init();
    int Test = 1;
    //cin >> Test;
    while(Test--)
    {
        read();
        sol();
    }
}

